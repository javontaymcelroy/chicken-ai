{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  useEffect(() => {\n    const sendInitialGreeting = async () => {\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `Hi there! Welcome to Chick-fil-AI. How can I assist you with your order today? ${persona}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      const responseBody = await response.json();\n      if (responseBody && responseBody.content) {\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: responseBody.content\n        }]);\n      }\n    };\n    if (messages.length === 0) {\n      sendInitialGreeting();\n    }\n  }, [messages]);\n  useEffect(() => {\n    console.log(\"Initial order:\", order);\n  }, [order]);\n  function extractInfo(chatGPTResponse) {\n    const patterns = [{\n      action: \"add\",\n      regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to my order)/i\n    }, {\n      action: \"update\",\n      regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i\n    }, {\n      action: \"delete\",\n      regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i\n    }, {\n      action: \"info\",\n      regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i\n    }];\n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return {\n          action: pattern.action,\n          item: {\n            name: itemName,\n            quantity: itemQuantity\n          }\n        };\n      }\n    }\n    return {};\n  }\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map(item => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 1,\n          topP: 0,\n          maxLength: 100\n        })\n      });\n      const responseBody = await response.json();\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              setOrder(prevOrder => {\n                const existingOrderItem = prevOrder.find(item => item.id === itemToAdd.id);\n                if (existingOrderItem) {\n                  existingOrderItem.quantity += 1;\n                  return [...prevOrder];\n                } else {\n                  return [...prevOrder, {\n                    ...itemToAdd,\n                    quantity: 1\n                  }];\n                }\n              });\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              setOrder(prevOrder => {\n                itemToUpdate.quantity = extractedInfo.item.quantity;\n                return [...prevOrder];\n              });\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              setOrder(prevOrder => prevOrder.filter((_, index) => index !== itemToDeleteIndex));\n            }\n            break;\n          case \"info\":\n            const itemToGetInfo = menu.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToGetInfo) {\n              setMessages(prevMessages => [...prevMessages, {\n                role: \"assistant\",\n                content: `${itemToGetInfo.name}: ${itemToGetInfo.description}`\n              }]);\n            }\n            break;\n          default:\n            setMessages(prevMessages => [...prevMessages, {\n              role: \"assistant\",\n              content: chatGPTResponse\n            }]);\n            break;\n        }\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RTBsf+PZdW71xghPDGraaRAP8Zw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","menu","order","setOrder","persona","sendInitialGreeting","response","fetch","method","headers","body","JSON","stringify","prompt","temperature","topP","maxLength","responseBody","json","content","prevMessages","role","length","console","log","extractInfo","chatGPTResponse","patterns","action","regex","pattern","match","groups","itemName","trim","toLowerCase","itemQuantity","quantity","parseInt","item","name","handleSubmit","e","preventDefault","chatHistory","map","m","join","extractedInfo","itemToAdd","find","prevOrder","existingOrderItem","id","itemToUpdate","itemToDeleteIndex","findIndex","filter","_","index","itemToGetInfo","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n\n  useEffect(() => {\n    const sendInitialGreeting = async () => {\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `Hi there! Welcome to Chick-fil-AI. How can I assist you with your order today? ${persona}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n\n      const responseBody = await response.json();\n\n      if (responseBody && responseBody.content) {\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: responseBody.content },\n        ]);\n      }\n    };\n\n    if (messages.length === 0) {\n      sendInitialGreeting();\n    }\n  }, [messages]);\n\n  useEffect(() => {\n    console.log(\"Initial order:\", order);\n  }, [order]);\n\n\n  function extractInfo(chatGPTResponse) {\n    const patterns = [\n      {\n        action: \"add\",\n        regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to my order)/i,\n      },\n      {\n        action: \"update\",\n        regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i,\n      },\n      {\n        action: \"delete\",\n        regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i,\n      },\n      {\n        action: \"info\",\n        regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i,\n      },\n    ];\n  \n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return { action: pattern.action, item: { name: itemName, quantity: itemQuantity } };\n      }\n    }\n  \n    return {};\n  }\n  \n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (inputText.trim()) {\n      setMessages([...messages, { role: \"user\", content: inputText }]);\n  \n      const chatHistory = [...messages, { role: \"user\", content: inputText }]\n        .map((m) => m.content)\n        .join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu\n            .map((item) => item.name)\n            .join(\", \")}. ${chatHistory}`,\n          temperature: 1,\n          topP: 0,\n          maxLength: 100,\n        }),\n      });\n  \n      const responseBody = await response.json();\n  \n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n  \n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n  \n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(\n              (item) =>\n                item.name.toLowerCase() ===\n                extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToAdd) {\n              setOrder((prevOrder) => {\n                const existingOrderItem = prevOrder.find(\n                  (item) => item.id === itemToAdd.id\n                );\n                if (existingOrderItem) {\n                  existingOrderItem.quantity += 1;\n                  return [...prevOrder];\n                } else {\n                  return [...prevOrder, { ...itemToAdd, quantity: 1 }];\n                }\n              });\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find(\n              (item) =>\n                item.name.toLowerCase() ===\n                extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToUpdate) {\n              setOrder((prevOrder) => {\n                itemToUpdate.quantity = extractedInfo.item.quantity;\n                return [...prevOrder];\n              });\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(\n              (item) =>\n                item.name.toLowerCase() ===\n                extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToDeleteIndex > -1) {\n              setOrder((prevOrder) =>\n                prevOrder.filter((_, index) => index !== itemToDeleteIndex)\n              );\n            }\n            break;\n          case \"info\":\n            const itemToGetInfo = menu.find(\n              (item) =>\n                item.name.toLowerCase() ===\n                extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToGetInfo) {\n              setMessages((prevMessages) => [\n                ...prevMessages,\n                { role: \"assistant\", content: `${itemToGetInfo.name}: ${itemToGetInfo.description}` },\n              ]);\n            }\n            break;\n          default:\n            setMessages((prevMessages) => [\n              ...prevMessages,\n              { role: \"assistant\", content: chatGPTResponse },\n            ]);\n            break;\n        }\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n  \n      setInputText(\"\");\n    }\n  };  \n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}