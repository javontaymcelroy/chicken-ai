{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map(item => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      console.log(\"Raw response:\", response);\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              console.log(\"Order before add:\", order);\n              const existingOrderItem = order.find(item => item.id === itemToAdd.id);\n              if (existingOrderItem) {\n                existingOrderItem.quantity += 1;\n              } else {\n                setOrder([...order, {\n                  ...itemToAdd,\n                  quantity: 1\n                }]);\n              }\n              console.log(\"Order after add:\", order);\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n          default:\n            break;\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RTBsf+PZdW71xghPDGraaRAP8Zw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","menu","order","setOrder","persona","storedMessages","localStorage","getItem","JSON","parse","setItem","stringify","handleSubmit","e","preventDefault","trim","role","content","chatHistory","map","m","join","response","fetch","method","headers","body","prompt","item","name","temperature","topP","maxLength","console","log","responseBody","json","chatGPTResponse","extractedInfo","extractInfo","action","itemToAdd","find","toLowerCase","existingOrderItem","id","quantity","itemToUpdate","itemToDeleteIndex","findIndex","filter","_","index","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\"\n\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (inputText.trim()) {\n      setMessages([...messages, { role: \"user\", content: inputText }]);\n  \n      const chatHistory = [...messages, { role: \"user\", content: inputText }].map((m) => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map((item) => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n  \n      console.log(\"Raw response:\", response);\n  \n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n  \n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n  \n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n  \n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              console.log(\"Order before add:\", order);\n              const existingOrderItem = order.find((item) => item.id === itemToAdd.id);\n              if (existingOrderItem) {\n                existingOrderItem.quantity += 1;\n              } else {\n                setOrder([...order, { ...itemToAdd, quantity: 1 }]);\n              }\n              console.log(\"Order after add:\", order);\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n          default:\n            break;\n        }\n  \n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n  \n      setInputText(\"\");\n    }\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}