{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    role: 'assistant',\n    content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? üêÆ\"\n  }]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner (preferably under 60 characters), avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  const chatContainerRef = useRef(null);\n\n  // Load messages from local storage\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n    setMessages(storedMessages);\n  }, []);\n\n  // Save individual messages to local storage\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage) {\n      let storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n      storedMessages.push(lastMessage);\n      localStorage.setItem(\"messages\", JSON.stringify(storedMessages));\n    }\n  }, [messages]);\n\n  // review conversation and update order per review\n  const reviewOrderItems = async () => {\n    const chatHistory = messages.map(m => m.content).join(\" \");\n    const response = await fetch(\"/api/chatgpt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        prompt: `Analyze the following conversation at a Chick-fil-A restaurant: ${chatHistory}. Based on the conversation, list ONLY the current items that should be on the customer's order. Available menu items: ${menu.map(item => item.name).join(\", \")}. Do not generate any additional responses as a customer or AI assistant.`,\n        temperature: 0.7,\n        topP: 1,\n        maxLength: 150\n      })\n    });\n    const responseBody = await response.json();\n    if (responseBody && responseBody.content) {\n      const chatGPTResponse = responseBody.content;\n      console.log(\"Menu Response:\", chatGPTResponse);\n\n      // Parse the response using regex\n      const menuItemRegex = new RegExp(`\\\\b(?:${menuData.menu.map(item => item.name).join(\"|\")})\\\\b`, \"ig\");\n      const menuItemMatches = chatGPTResponse.match(menuItemRegex);\n      if (menuItemMatches) {\n        const newOrder = [];\n        for (const itemName of menuItemMatches) {\n          const menuItem = menu.find(item => item.name.toLowerCase() === itemName.toLowerCase());\n          if (menuItem) {\n            const existingOrderItem = newOrder.find(item => item.id === menuItem.id);\n            if (existingOrderItem) {\n              existingOrderItem.quantity += 1;\n            } else {\n              newOrder.push({\n                ...menuItem,\n                quantity: 1\n              });\n            }\n          }\n        }\n\n        // Update the setOrder array if there are changes\n        if (JSON.stringify(order) !== JSON.stringify(newOrder)) {\n          setOrder(newOrder);\n        }\n      }\n    }\n  };\n\n  // order\n  useEffect(() => {\n    setOrder([]);\n  }, []);\n\n  // Render and update menuOrder dynamically\n  const renderOrder = () => {\n    return order.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [item.name, \" x \", item.quantity]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders under this ${persona}. The menu items available are: ${menu.map(item => item.name).join(\", \")}. Your task is to understand and process customer's requests for adding, updating, or removing items from their order, and provide information about menu items. ${chatHistory}. Please keep your response concise.`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      const responseBody = await response.json();\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n        console.log(\"ChatGPT Response:\", chatGPTResponse);\n\n        // Call the reviewOrderItems function to update the order\n        await reviewOrderItems(chatGPTResponse);\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-order\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Order:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), renderOrder()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"z1g16G5VW+XYOAuLaIRfNm59Zhc=\");\n_c = App;\nexport default App;\n\n// add to cart buttons\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","role","content","menu","order","setOrder","persona","chatContainerRef","storedMessages","JSON","parse","localStorage","getItem","lastMessage","length","push","setItem","stringify","reviewOrderItems","chatHistory","map","m","join","response","fetch","method","headers","body","prompt","item","name","temperature","topP","maxLength","responseBody","json","chatGPTResponse","console","log","menuItemRegex","RegExp","menuItemMatches","match","newOrder","itemName","menuItem","find","toLowerCase","existingOrderItem","id","quantity","renderOrder","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","e","preventDefault","trim","prevMessages","current","scrollTop","scrollHeight","className","ref","message","index","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      role: 'assistant',\n      content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? üêÆ\",\n    },\n  ]);\n  \n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner (preferably under 60 characters), avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\"\n  const chatContainerRef = useRef(null);\n\n\n  // Load messages from local storage\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n    setMessages(storedMessages);\n  }, []);\n\n  // Save individual messages to local storage\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage) {\n      let storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n      storedMessages.push(lastMessage);\n      localStorage.setItem(\"messages\", JSON.stringify(storedMessages));\n    }\n  }, [messages]);\n\n\n  // review conversation and update order per review\n  const reviewOrderItems = async () => {\n    const chatHistory = messages\n      .map((m) => m.content)\n      .join(\" \");\n  \n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `Analyze the following conversation at a Chick-fil-A restaurant: ${chatHistory}. Based on the conversation, list ONLY the current items that should be on the customer's order. Available menu items: ${menu\n            .map((item) => item.name)\n            .join(\", \")}. Do not generate any additional responses as a customer or AI assistant.`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n      \n      \n      \n    const responseBody = await response.json();\n  \n    if (responseBody && responseBody.content) {\n      const chatGPTResponse = responseBody.content;\n      console.log(\"Menu Response:\", chatGPTResponse);\n  \n      // Parse the response using regex\n      const menuItemRegex = new RegExp(\n        `\\\\b(?:${menuData.menu.map((item) => item.name).join(\"|\")})\\\\b`,\n        \"ig\"\n      );\n      const menuItemMatches = chatGPTResponse.match(menuItemRegex);\n  \n      if (menuItemMatches) {\n        const newOrder = [];\n  \n        for (const itemName of menuItemMatches) {\n          const menuItem = menu.find(\n            (item) => item.name.toLowerCase() === itemName.toLowerCase()\n          );\n  \n          if (menuItem) {\n            const existingOrderItem = newOrder.find(\n              (item) => item.id === menuItem.id\n            );\n  \n            if (existingOrderItem) {\n              existingOrderItem.quantity += 1;\n            } else {\n              newOrder.push({ ...menuItem, quantity: 1 });\n            }\n          }\n        }\n  \n        // Update the setOrder array if there are changes\n        if (JSON.stringify(order) !== JSON.stringify(newOrder)) {\n          setOrder(newOrder);\n        }\n      }\n    }\n  };\n  \n\n// order\nuseEffect(() => {\n  setOrder([]);\n}, []);\n\n// Render and update menuOrder dynamically\nconst renderOrder = () => {\n  return order.map((item) => (\n    <div key={item.id}>\n      {item.name} x {item.quantity}\n    </div>\n  ));\n};\n  \n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n\n  if (inputText.trim()) {\n    setMessages([...messages, { role: \"user\", content: inputText }]);\n\n    const chatHistory = [...messages, { role: \"user\", content: inputText }]\n      .map((m) => m.content)\n      .join(\" \");\n\n    const response = await fetch(\"/api/chatgpt\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders under this ${persona}. The menu items available are: ${menu\n          .map((item) => item.name)\n          .join(\", \")}. Your task is to understand and process customer's requests for adding, updating, or removing items from their order, and provide information about menu items. ${chatHistory}. Please keep your response concise.`,\n        temperature: 0.7,\n        topP: 1,\n        maxLength: 150,\n      }),\n    });\n\n    const responseBody = await response.json();\n\n    if (responseBody && responseBody.content) {\n      const chatGPTResponse = responseBody.content;\n      console.log(\"ChatGPT Response:\", chatGPTResponse);\n\n      // Call the reviewOrderItems function to update the order\n      await reviewOrderItems(chatGPTResponse);\n\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: \"assistant\", content: chatGPTResponse },\n      ]);\n    } else {\n      console.log(\"No response content:\", responseBody);\n    }\n\n    setInputText(\"\");\n  }\n};\n\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\" ref={chatContainerRef}>\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"menu-order\">\n        <h2>Your Order:</h2>\n        {renderOrder()}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n\n// add to cart buttons"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}