{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    role: 'assistant',\n    content: 'Hi there! Welcome to Chick-fil-A. How can I assist you today?'\n  }]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner (preferably under 60 characters), avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  const chatContainerRef = useRef(null);\n\n  // Load messages from local storage\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n    setMessages(storedMessages);\n  }, []);\n\n  // Save individual messages to local storage\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage) {\n      let storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n      storedMessages.push(lastMessage);\n      localStorage.setItem(\"messages\", JSON.stringify(storedMessages));\n    }\n  }, [messages]);\n\n  // order\n  useEffect(() => {\n    setOrder([]);\n  }, []);\n\n  // Render and update menuOrder dynamically\n  const renderOrder = () => {\n    return order.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [item.name, \" x \", item.quantity]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this));\n  };\n  const extractInfo = (responseText, lastUserMessage) => {\n    const menuItemNames = menuData.menu.map(item => item.name).join('|');\n    const addActionRegex = new RegExp(`(?:add|get|give me|add to my order|I want|I would like|include)\\\\s*(?:a |an |some |)(${menuItemNames})(?:please|)`, 'i');\n    const updateActionRegex = /(?:change|update|alter|switch|replace|adjust)(?: the| my)?(?: quantity of)?(?: the)? ([a-zA-Z\\s]+) (?:to|for|in my order)?(?:\\s*please\\s*|)(?:\\s*to\\s*|)(\\d+)/i;\n    const deleteActionRegex = /(?:remove|delete|cancel|take off|erase|discard)(?: the| a| an)? ([a-zA-Z\\s]+)(?: from my order| from the order|)?(?: please|)/i;\n    const addActionMatch = responseText.match(addActionRegex);\n    const updateActionMatch = responseText.match(updateActionRegex);\n    const deleteActionMatch = responseText.match(deleteActionRegex);\n    if (addActionMatch && lastUserMessage.match(addActionRegex)) {\n      return {\n        action: \"add\",\n        item: {\n          name: addActionMatch[1].trim(),\n          quantity: null\n        }\n      };\n    } else if (updateActionMatch) {\n      return {\n        action: \"update\",\n        item: {\n          name: updateActionMatch[1].trim(),\n          quantity: parseInt(updateActionMatch[2])\n        }\n      };\n    } else if (deleteActionMatch) {\n      return {\n        action: \"delete\",\n        item: {\n          name: deleteActionMatch[1].trim(),\n          quantity: null\n        }\n      };\n    } else {\n      return {\n        action: \"\",\n        item: {\n          name: \"\",\n          quantity: null\n        }\n      };\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const lastUserMessage = inputText;\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders under this ${persona}. The menu items available are: ${menu.map(item => item.name).join(\", \")}. Your task is to understand and process customer's requests for adding, updating, or removing items from their order, and provide information about menu items. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      console.log(\"Raw Response:\", response);\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse, lastUserMessage);\n        console.log(\"Extracted info:\", extractedInfo);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              setOrder(prevOrder => {\n                const existingOrderItem = prevOrder.find(item => item.id === itemToAdd.id);\n                if (existingOrderItem) {\n                  return prevOrder.map(item => item.id === itemToAdd.id ? {\n                    ...item,\n                    quantity: item.quantity + 1\n                  } : item);\n                } else {\n                  return [...prevOrder, {\n                    ...itemToAdd,\n                    quantity: 1\n                  }];\n                }\n              });\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n          default:\n            break;\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-order\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Order:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), renderOrder()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/L99PaPx2P0uijMD3Km8tNCFZMo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","role","content","menu","order","setOrder","persona","chatContainerRef","storedMessages","JSON","parse","localStorage","getItem","lastMessage","length","push","setItem","stringify","renderOrder","map","item","children","name","quantity","id","fileName","_jsxFileName","lineNumber","columnNumber","extractInfo","responseText","lastUserMessage","menuItemNames","join","addActionRegex","RegExp","updateActionRegex","deleteActionRegex","addActionMatch","match","updateActionMatch","deleteActionMatch","action","trim","parseInt","handleSubmit","e","preventDefault","chatHistory","m","response","fetch","method","headers","body","prompt","temperature","topP","maxLength","console","log","responseBody","json","chatGPTResponse","extractedInfo","itemToAdd","find","toLowerCase","prevOrder","existingOrderItem","itemToUpdate","itemToDeleteIndex","findIndex","filter","_","index","prevMessages","current","scrollTop","scrollHeight","className","ref","message","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      role: 'assistant',\n      content: 'Hi there! Welcome to Chick-fil-A. How can I assist you today?',\n    },\n  ]);\n  \n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner (preferably under 60 characters), avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\"\n  const chatContainerRef = useRef(null);\n\n  // Load messages from local storage\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n    setMessages(storedMessages);\n  }, []);\n\n  // Save individual messages to local storage\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage) {\n      let storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n      storedMessages.push(lastMessage);\n      localStorage.setItem(\"messages\", JSON.stringify(storedMessages));\n    }\n  }, [messages]);\n\n// order\nuseEffect(() => {\n  setOrder([]);\n}, []);\n\n// Render and update menuOrder dynamically\nconst renderOrder = () => {\n  return order.map((item) => (\n    <div key={item.id}>\n      {item.name} x {item.quantity}\n    </div>\n  ));\n};\n  \n\nconst extractInfo = (responseText, lastUserMessage) => {\n  const menuItemNames = menuData.menu.map((item) => item.name).join('|');\n  const addActionRegex = new RegExp(`(?:add|get|give me|add to my order|I want|I would like|include)\\\\s*(?:a |an |some |)(${menuItemNames})(?:please|)`, 'i');\n  const updateActionRegex = /(?:change|update|alter|switch|replace|adjust)(?: the| my)?(?: quantity of)?(?: the)? ([a-zA-Z\\s]+) (?:to|for|in my order)?(?:\\s*please\\s*|)(?:\\s*to\\s*|)(\\d+)/i;\n  const deleteActionRegex = /(?:remove|delete|cancel|take off|erase|discard)(?: the| a| an)? ([a-zA-Z\\s]+)(?: from my order| from the order|)?(?: please|)/i;\n\n  const addActionMatch = responseText.match(addActionRegex);\n  const updateActionMatch = responseText.match(updateActionRegex);\n  const deleteActionMatch = responseText.match(deleteActionRegex);\n\n  if (addActionMatch && lastUserMessage.match(addActionRegex)) {\n    return {\n      action: \"add\",\n      item: {\n        name: addActionMatch[1].trim(),\n        quantity: null,\n      },\n    };\n  } else if (updateActionMatch) {\n    return {\n      action: \"update\",\n      item: {\n        name: updateActionMatch[1].trim(),\n        quantity: parseInt(updateActionMatch[2]),\n      },\n    };\n  } else if (deleteActionMatch) {\n    return {\n      action: \"delete\",\n      item: {\n        name: deleteActionMatch[1].trim(),\n        quantity: null,\n      },\n    };\n  } else {\n    return {\n      action: \"\",\n      item: {\n        name: \"\",\n        quantity: null,\n      },\n    };\n  }\n};\n\n  \nconst handleSubmit = async (e) => {\n  e.preventDefault();\n\n  if (inputText.trim()) {\n    setMessages([...messages, { role: \"user\", content: inputText }]);\n\n    const chatHistory = [...messages, { role: \"user\", content: inputText }]\n      .map((m) => m.content)\n      .join(\" \");\n    const lastUserMessage = inputText;\n\n    const response = await fetch(\"/api/chatgpt\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders under this ${persona}. The menu items available are: ${menu\n          .map((item) => item.name)\n          .join(\", \")}. Your task is to understand and process customer's requests for adding, updating, or removing items from their order, and provide information about menu items. ${chatHistory}`,\n        temperature: 0.7,\n        topP: 1,\n        maxLength: 150,\n      }),\n    });\n\n    console.log(\"Raw Response:\", response);\n\n    const responseBody = await response.json();\n    console.log(\"Response body:\", responseBody);\n\n    if (responseBody && responseBody.content) {\n      const chatGPTResponse = responseBody.content;\n\n      // Extract relevant information from the ChatGPT response\n      const extractedInfo = extractInfo(chatGPTResponse, lastUserMessage);\n      console.log(\"Extracted info:\", extractedInfo);\n  \n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(\n              (item) =>\n                item.name.toLowerCase() === extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToAdd) {\n              setOrder((prevOrder) => {\n                const existingOrderItem = prevOrder.find(\n                  (item) => item.id === itemToAdd.id\n                );\n                if (existingOrderItem) {\n                  return prevOrder.map((item) =>\n                    item.id === itemToAdd.id\n                      ? { ...item, quantity: item.quantity + 1 }\n                      : item\n                  );\n                } else {\n                  return [...prevOrder, { ...itemToAdd, quantity: 1 }];\n                }\n              });\n            }\n            break;\n  \n          case \"update\":\n            const itemToUpdate = order.find(\n              (item) =>\n                item.name.toLowerCase() === extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n  \n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(\n              (item) =>\n                item.name.toLowerCase() === extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n  \n          default:\n            break;\n        }\n  \n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n  \n      setInputText(\"\");\n    }\n  };\n  \n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\" ref={chatContainerRef}>\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      {/* Add renderOrder here */}\n      <div className=\"menu-order\">\n        <h2>Your Order:</h2>\n        {renderOrder()}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}