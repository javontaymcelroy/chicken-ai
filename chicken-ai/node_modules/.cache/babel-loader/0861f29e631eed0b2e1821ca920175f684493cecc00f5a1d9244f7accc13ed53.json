{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  const chatContainerRef = useRef(null);\n\n  // Load messages from local storage\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n    setMessages(storedMessages);\n  }, []);\n\n  // Save individual messages to local storage\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage) {\n      let storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n      storedMessages.push(lastMessage);\n      localStorage.setItem(\"messages\", JSON.stringify(storedMessages));\n    }\n  }, [messages]);\n\n  // order\n  useEffect(() => {\n    setOrder([]);\n  }, []);\n\n  // Render and update menuOrder dynamically\n  const renderOrder = () => {\n    return order.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [item.name, \" x \", item.quantity]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this));\n  };\n  function extractInfo(chatGPTResponse) {\n    const patterns = [{\n      action: \"add\",\n      regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to (?:the menu|my order))/i\n    }, {\n      action: \"update\",\n      regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i\n    }, {\n      action: \"delete\",\n      regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i\n    }, {\n      action: \"info\",\n      regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i\n    }];\n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return {\n          action: pattern.action,\n          item: {\n            name: itemName,\n            quantity: itemQuantity\n          }\n        };\n      }\n    }\n    return {};\n  }\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders under this ${persona}. The menu items available are: ${menu.map(item => item.name).join(\", \")}. Your task is to understand and process customer's requests for adding, updating, or removing items from their order, and provide information about menu items. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      console.log(\"Raw Response:\", response);\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n        console.log(\"Extracted info:\", extractedInfo); // Moved this line here\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              setOrder(prevOrder => {\n                const existingOrderItem = prevOrder.find(item => item.id === itemToAdd.id);\n                if (existingOrderItem) {\n                  return prevOrder.map(item => item.id === itemToAdd.id ? {\n                    ...item,\n                    quantity: item.quantity + 1\n                  } : item);\n                } else {\n                  return [...prevOrder, {\n                    ...itemToAdd,\n                    quantity: 1\n                  }];\n                }\n              });\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n          default:\n            break;\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-order\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Order:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), renderOrder()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xqfzN3a41YEbSJ7qBGd4zpQgBHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","menu","order","setOrder","persona","chatContainerRef","storedMessages","JSON","parse","localStorage","getItem","lastMessage","length","push","setItem","stringify","renderOrder","map","item","children","name","quantity","id","fileName","_jsxFileName","lineNumber","columnNumber","extractInfo","chatGPTResponse","patterns","action","regex","pattern","match","groups","itemName","trim","toLowerCase","itemQuantity","parseInt","handleSubmit","e","preventDefault","role","content","chatHistory","m","join","response","fetch","method","headers","body","prompt","temperature","topP","maxLength","console","log","responseBody","json","extractedInfo","itemToAdd","find","prevOrder","existingOrderItem","itemToUpdate","itemToDeleteIndex","findIndex","filter","_","index","prevMessages","current","scrollTop","scrollHeight","className","ref","message","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\"\n  const chatContainerRef = useRef(null);\n\n  // Load messages from local storage\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n    setMessages(storedMessages);\n  }, []);\n\n  // Save individual messages to local storage\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage) {\n      let storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n      storedMessages.push(lastMessage);\n      localStorage.setItem(\"messages\", JSON.stringify(storedMessages));\n    }\n  }, [messages]);\n\n// order\nuseEffect(() => {\n  setOrder([]);\n}, []);\n\n// Render and update menuOrder dynamically\nconst renderOrder = () => {\n  return order.map((item) => (\n    <div key={item.id}>\n      {item.name} x {item.quantity}\n    </div>\n  ));\n};\n  \n\n  function extractInfo(chatGPTResponse) {\n    const patterns = [\n      {\n        action: \"add\",\n        regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to (?:the menu|my order))/i,\n      },      \n      {\n        action: \"update\",\n        regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i,\n      },\n      {\n        action: \"delete\",\n        regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i,\n      },\n      {\n        action: \"info\",\n        regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i,\n      },\n    ];\n  \n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return { action: pattern.action, item: { name: itemName, quantity: itemQuantity } };\n      }\n    }\n  \n    return {};\n  }\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (inputText.trim()) {\n      setMessages([...messages, { role: \"user\", content: inputText }]);\n  \n      const chatHistory = [...messages, { role: \"user\", content: inputText }]\n        .map((m) => m.content)\n        .join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders under this ${persona}. The menu items available are: ${menu\n            .map((item) => item.name)\n            .join(\", \")}. Your task is to understand and process customer's requests for adding, updating, or removing items from their order, and provide information about menu items. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n  \n      console.log(\"Raw Response:\", response);\n  \n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n  \n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n  \n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n        console.log(\"Extracted info:\", extractedInfo); // Moved this line here\n  \n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(\n              (item) =>\n                item.name.toLowerCase() === extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToAdd) {\n              setOrder((prevOrder) => {\n                const existingOrderItem = prevOrder.find(\n                  (item) => item.id === itemToAdd.id\n                );\n                if (existingOrderItem) {\n                  return prevOrder.map((item) =>\n                    item.id === itemToAdd.id\n                      ? { ...item, quantity: item.quantity + 1 }\n                      : item\n                  );\n                } else {\n                  return [...prevOrder, { ...itemToAdd, quantity: 1 }];\n                }\n              });\n            }\n            break;\n  \n          case \"update\":\n            const itemToUpdate = order.find(\n              (item) =>\n                item.name.toLowerCase() === extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n  \n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(\n              (item) =>\n                item.name.toLowerCase() === extractedInfo.item.name.toLowerCase()\n            );\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n  \n          default:\n            break;\n        }\n  \n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n  \n      setInputText(\"\");\n    }\n  };\n  \n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  \n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\" ref={chatContainerRef}>\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      {/* Add renderOrder here */}\n      <div className=\"menu-order\">\n        <h2>Your Order:</h2>\n        {renderOrder()}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}