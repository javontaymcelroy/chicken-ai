{"ast":null,"code":"export const overseer = async (messages, menu) => {\n  const chatHistory = messages.map(m => m.content).join(\" \");\n  const response = await fetch(\"/api/chatgpt\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      prompt: `Look at this conversation, ${chatHistory}. Given this conversation and these menu items available here: ${menu.map(item => item.name).join(\", \")}. Return ONLY the menu items that the user wants added to their order. Do not include suggestions, explanations, or feedback. Only include the item(s) the user explicitly stated they want added/deleted/updated to their order.`,\n      temperature: 0,\n      topP: 1,\n      maxLength: 100\n    })\n  });\n  const responseBody = await response.json();\n  return responseBody.content;\n};\nexport const extractAndFind = (overseerResponse, menu) => {\n  const menuItemsInResponse = menu.filter(menuItem => overseerResponse.toLowerCase().includes(menuItem.name.toLowerCase()));\n  return menuItemsInResponse.map(item => item.id);\n};\nexport const setCustomerOrder = (ids, menu) => {\n  const newOrder = ids.map(id => {\n    const menuItem = menu.find(item => item.id === id);\n    return {\n      ...menuItem,\n      quantity: 1\n    };\n  });\n  return newOrder;\n};","map":{"version":3,"names":["overseer","messages","menu","chatHistory","map","m","content","join","response","fetch","method","headers","body","JSON","stringify","prompt","item","name","temperature","topP","maxLength","responseBody","json","extractAndFind","overseerResponse","menuItemsInResponse","filter","menuItem","toLowerCase","includes","id","setCustomerOrder","ids","newOrder","find","quantity"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/utils/chatUtils.js"],"sourcesContent":["export const overseer = async (messages, menu) => {\n    const chatHistory = messages.map((m) => m.content).join(\" \");\n  \n    const response = await fetch(\"/api/chatgpt\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        prompt: `Look at this conversation, ${chatHistory}. Given this conversation and these menu items available here: ${menu.map((item) => item.name).join(\", \")}. Return ONLY the menu items that the user wants added to their order. Do not include suggestions, explanations, or feedback. Only include the item(s) the user explicitly stated they want added/deleted/updated to their order.`,\n        temperature: 0,\n        topP: 1,\n        maxLength: 100,\n      }),\n    });\n  \n    const responseBody = await response.json();\n    return responseBody.content;\n  };\n  \n  export const extractAndFind = (overseerResponse, menu) => {\n    const menuItemsInResponse = menu.filter((menuItem) =>\n      overseerResponse.toLowerCase().includes(menuItem.name.toLowerCase())\n    );\n    return menuItemsInResponse.map((item) => item.id);\n  };\n  \n  export const setCustomerOrder = (ids, menu) => {\n    const newOrder = ids.map((id) => {\n      const menuItem = menu.find((item) => item.id === id);\n      return {\n        ...menuItem,\n        quantity: 1,\n      };\n    });\n    return newOrder;\n  };\n  "],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,KAAK;EAC9C,MAAMC,WAAW,GAAGF,QAAQ,CAACG,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAE5D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,EAAE;IAC3CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,MAAM,EAAG,8BAA6BZ,WAAY,kEAAiED,IAAI,CAACE,GAAG,CAAEY,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAACV,IAAI,CAAC,IAAI,CAAE,mOAAkO;MAC9XW,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE,CAAC;MACPC,SAAS,EAAE;IACb,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;EAC1C,OAAOD,YAAY,CAACf,OAAO;AAC7B,CAAC;AAED,OAAO,MAAMiB,cAAc,GAAGA,CAACC,gBAAgB,EAAEtB,IAAI,KAAK;EACxD,MAAMuB,mBAAmB,GAAGvB,IAAI,CAACwB,MAAM,CAAEC,QAAQ,IAC/CH,gBAAgB,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,QAAQ,CAACV,IAAI,CAACW,WAAW,CAAC,CAAC,CACrE,CAAC;EACD,OAAOH,mBAAmB,CAACrB,GAAG,CAAEY,IAAI,IAAKA,IAAI,CAACc,EAAE,CAAC;AACnD,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,GAAG,EAAE9B,IAAI,KAAK;EAC7C,MAAM+B,QAAQ,GAAGD,GAAG,CAAC5B,GAAG,CAAE0B,EAAE,IAAK;IAC/B,MAAMH,QAAQ,GAAGzB,IAAI,CAACgC,IAAI,CAAElB,IAAI,IAAKA,IAAI,CAACc,EAAE,KAAKA,EAAE,CAAC;IACpD,OAAO;MACL,GAAGH,QAAQ;MACXQ,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC,CAAC;EACF,OAAOF,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}