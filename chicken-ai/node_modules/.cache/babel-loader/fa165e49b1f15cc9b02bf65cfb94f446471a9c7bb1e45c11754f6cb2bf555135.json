{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport ChatContainer from \"./components/ChatContainer\";\nimport OrderContainer from \"./components/OrderContainer\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport { overseer, extractAndFind, setCustomerOrder } from \"./utils/chatUtils\";\nimport { persona } from \"./persona\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useLocalStorage(\"chat_history\", [{\n    role: \"assistant\",\n    content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? 🐮\"\n  }]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      const newMessages = [...messages, {\n        role: \"user\",\n        content: inputText\n      }];\n      setMessages(newMessages);\n      const chatHistory = newMessages.map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI server for Chick-fil-A, helping customers place orders using this ${persona}. The menu items available are: ${menu.map(item => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      const responseBody = await response.json();\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  const overseerCallback = useCallback(async () => {\n    const overseerResponse = await overseer(messages, menu);\n    const itemIds = extractAndFind(overseerResponse, menu);\n    const newOrder = setCustomerOrder(itemIds, menu);\n    setOrder(newOrder);\n    console.log(\"Overseer:\", overseerResponse);\n  }, [messages, menu]);\n  useEffect(() => {\n    if (messages.length > 1) {\n      overseerCallback();\n    }\n  }, [messages, menu, overseerCallback]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrderContainer, {\n      order: order\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatContainer, {\n      messages: messages,\n      inputText: inputText,\n      setInputText: setInputText,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7SUgx/RkT+7La5aZYvJz6g8/CtU=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","menuData","ChatContainer","OrderContainer","useLocalStorage","overseer","extractAndFind","setCustomerOrder","persona","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","role","content","menu","order","setOrder","handleSubmit","e","preventDefault","trim","newMessages","chatHistory","map","m","join","response","fetch","method","headers","body","JSON","stringify","prompt","item","name","temperature","topP","maxLength","responseBody","json","chatGPTResponse","prevMessages","console","log","overseerCallback","overseerResponse","itemIds","newOrder","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport ChatContainer from \"./components/ChatContainer\";\nimport OrderContainer from \"./components/OrderContainer\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport { overseer, extractAndFind, setCustomerOrder } from \"./utils/chatUtils\";\nimport { persona } from \"./persona\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useLocalStorage(\"chat_history\", [\n    {\n      role: \"assistant\",\n      content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? 🐮\",\n    },\n  ]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (inputText.trim()) {\n      const newMessages = [...messages, { role: \"user\", content: inputText }];\n      setMessages(newMessages);\n\n      const chatHistory = newMessages.map((m) => m.content).join(\" \");\n\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI server for Chick-fil-A, helping customers place orders using this ${persona}. The menu items available are: ${menu.map((item) => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n\n      const responseBody = await response.json();\n\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n\n      setInputText(\"\");\n    }\n  };\n\n  const overseerCallback = useCallback(async () => {\n    const overseerResponse = await overseer(messages, menu);\n    const itemIds = extractAndFind(overseerResponse, menu);\n    const newOrder = setCustomerOrder(itemIds, menu);\n    setOrder(newOrder);\n    console.log(\"Overseer:\", overseerResponse);\n  }, [messages, menu]);\n\n  useEffect(() => {\n    if (messages.length > 1) {\n      overseerCallback();\n    }\n  }, [messages, menu, overseerCallback]);\n\n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <OrderContainer order={order} />\n      <ChatContainer\n        messages={messages}\n        inputText={inputText}\n        setInputText={setInputText}\n        handleSubmit={handleSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}