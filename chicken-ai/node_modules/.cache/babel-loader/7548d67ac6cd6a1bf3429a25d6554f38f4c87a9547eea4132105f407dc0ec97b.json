{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n\n  // Helper function to extract menu items from the conversation\n  const extractOrderItems = messages => {\n    const orderedItems = [];\n    const regex = new RegExp(`(${menu.map(item => item.name).join(\"|\")})`, \"i\");\n    messages.forEach((message, index) => {\n      if (message.role === \"user\") {\n        const matches = message.content.match(regex);\n        if (matches && matches.length > 0) {\n          let size = \"\";\n          let quantity = 1;\n          if (messages[index + 1] && messages[index + 1].role === \"assistant\" && /what size/i.test(messages[index + 1].content)) {\n            const sizeMatches = messages[index + 2].content.match(/(small|medium|large)/i);\n            if (sizeMatches && sizeMatches.length > 0) {\n              size = sizeMatches[0];\n            }\n          }\n          orderedItems.push({\n            name: matches[0],\n            size: size,\n            quantity: quantity\n          });\n        }\n      }\n    });\n    return orderedItems;\n  };\n\n  // Updates the customer's order\n  const updateOrder = items => {\n    items.forEach(item => {\n      const menuItem = menu.find(mItem => mItem.name.toLowerCase() === item.name.toLowerCase());\n      if (menuItem) {\n        const newItem = {\n          id: menuItem.id,\n          name: item.name,\n          size: item.size,\n          quantity: item.quantity\n        };\n        setOrder(prevOrder => [...prevOrder, newItem]);\n      }\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map(item => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      console.log(\"Raw response:\", response);\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      // Inside handleSubmit function, before setInputText(\"\");\n      const orderedItems = extractOrderItems([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      updateOrder(orderedItems);\n      setInputText(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RTBsf+PZdW71xghPDGraaRAP8Zw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","menu","order","setOrder","persona","storedMessages","localStorage","getItem","JSON","parse","setItem","stringify","extractOrderItems","orderedItems","regex","RegExp","map","item","name","join","forEach","message","index","role","matches","content","match","length","size","quantity","test","sizeMatches","push","updateOrder","items","menuItem","find","mItem","toLowerCase","newItem","id","prevOrder","handleSubmit","e","preventDefault","trim","chatHistory","m","response","fetch","method","headers","body","prompt","temperature","topP","maxLength","console","log","responseBody","json","chatGPTResponse","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\"\n\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n\n  // Helper function to extract menu items from the conversation\nconst extractOrderItems = (messages) => {\n  const orderedItems = [];\n  const regex = new RegExp(`(${menu.map((item) => item.name).join(\"|\")})`, \"i\");\n\n  messages.forEach((message, index) => {\n    if (message.role === \"user\") {\n      const matches = message.content.match(regex);\n      if (matches && matches.length > 0) {\n        let size = \"\";\n        let quantity = 1;\n\n        if (\n          messages[index + 1] &&\n          messages[index + 1].role === \"assistant\" &&\n          /what size/i.test(messages[index + 1].content)\n        ) {\n          const sizeMatches = messages[index + 2].content.match(/(small|medium|large)/i);\n          if (sizeMatches && sizeMatches.length > 0) {\n            size = sizeMatches[0];\n          }\n        }\n\n        orderedItems.push({\n          name: matches[0],\n          size: size,\n          quantity: quantity,\n        });\n      }\n    }\n  });\n\n  return orderedItems;\n};\n\n// Updates the customer's order\nconst updateOrder = (items) => {\n  items.forEach((item) => {\n    const menuItem = menu.find((mItem) => mItem.name.toLowerCase() === item.name.toLowerCase());\n    if (menuItem) {\n      const newItem = {\n        id: menuItem.id,\n        name: item.name,\n        size: item.size,\n        quantity: item.quantity,\n      };\n      setOrder((prevOrder) => [...prevOrder, newItem]);\n    }\n  });\n};\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (inputText.trim()) {\n      setMessages([...messages, { role: \"user\", content: inputText }]);\n  \n      const chatHistory = [...messages, { role: \"user\", content: inputText }].map((m) => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map((item) => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n  \n      console.log(\"Raw response:\", response);\n  \n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n  \n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n  \n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      // Inside handleSubmit function, before setInputText(\"\");\nconst orderedItems = extractOrderItems([...messages, { role: \"user\", content: inputText }]);\nupdateOrder(orderedItems);\n\n      setInputText(\"\");\n    }\n  };\n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}