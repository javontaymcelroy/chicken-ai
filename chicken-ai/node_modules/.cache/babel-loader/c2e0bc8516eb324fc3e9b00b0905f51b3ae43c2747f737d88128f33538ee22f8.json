{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // ------ STATES ------ //\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    role: \"assistant\",\n    content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? 🐮\"\n  }]);\n  const [menu] = useState(menuData.menu);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Include an emoji in your message to convey personality. Write in a straightforward and concise manner (preferably under 50 characters), avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  const [order, setOrder] = useState([]);\n  const chatContainerRef = useRef(null);\n\n  // ------ FUNCTIONS //\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      const newMessages = [...messages, {\n        role: \"user\",\n        content: inputText\n      }];\n      setMessages(newMessages);\n      const chatHistory = newMessages.map(m => m.content).join(\" \");\n      const response = await fetch(\"http://localhost:3001/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI server for Chick-fil-A, helping customers place orders using this ${persona}. The menu items available are: ${menu.map(item => item.name).join(\", \")}. ${chatHistory} Do not recommend menu items if the customer hasn't completed their first menu item.`,\n          temperature: 0,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      const responseBody = await response.json();\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  const overseer = useCallback(async () => {\n    const chatHistory = messages.map(m => m.content).join(\" \");\n    const response = await fetch(\"http://localhost:3001/api/overseer\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        prompt: `Analyze this conversation: ${chatHistory}. Given this conversation and these menu items available here: ${menu.map(item => item.name).join(\", \")} In an imperitive and concise manner, return ONLY the NAMES of the menu items the user wants added to their order in a comma-separated list. Follow this structure all the time: Spicy Chicken Sandwich, Sweet Tea`,\n        temperature: 0,\n        topP: 1,\n        maxLength: 100\n      })\n    });\n    const responseBody = await response.json();\n    return responseBody.content;\n  }, [messages, menu]);\n  const processOverseerResponse = useCallback(async () => {\n    const overseerResponse = await overseer();\n    const itemStrings = overseerResponse.split(\", \");\n    const newOrder = itemStrings.map(itemString => {\n      const [itemName, ...modifications] = itemString.split(\" with \");\n      const menuItem = menu.find(item => item.name.toLowerCase() === itemName.toLowerCase());\n      if (!menuItem) return null;\n      const appliedModifications = modifications.map(mod => menuItem.modifications.find(m => m.name.toLowerCase() === mod.toLowerCase())).filter(m => m);\n      return {\n        ...menuItem,\n        quantity: 1,\n        modifications: appliedModifications\n      };\n    }).filter(item => item);\n    setOrder(newOrder);\n    console.log(\"Overseer:\", overseerResponse);\n  }, [menu, overseer]);\n  const clearChat = () => {\n    localStorage.removeItem(\"chat_history\");\n    setMessages([{\n      role: \"assistant\",\n      content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? 🐮\"\n    }]);\n    setOrder([]);\n  };\n\n  // ------ HOOKS ------ //\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n    // Add these lines to scroll to the latest message when messages change\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  useEffect(() => {\n    if (messages.length > 1) {\n      processOverseerResponse();\n    }\n  }, [messages, menu, overseer, processOverseerResponse]);\n\n  // ------ RETURN ------ //\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 3\n      }, this), order.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: order.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item.name, \" - \", item.size ? `${item.size} ` : \"\", item.quantity > 1 ? `(${item.quantity})` : \"\", item.modifications && item.modifications.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" (with \", item.modifications.map(mod => mod.name).join(\", \"), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 11\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 3\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No items in your order.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearChat,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Zq71iTXy7mSJUMkfbQGDfkFDqgU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","role","content","menu","persona","order","setOrder","chatContainerRef","handleSubmit","e","preventDefault","trim","newMessages","chatHistory","map","m","join","response","fetch","method","headers","body","JSON","stringify","prompt","item","name","temperature","topP","maxLength","responseBody","json","chatGPTResponse","prevMessages","console","log","overseer","processOverseerResponse","overseerResponse","itemStrings","split","newOrder","itemString","itemName","modifications","menuItem","find","toLowerCase","appliedModifications","mod","filter","quantity","clearChat","localStorage","removeItem","storedMessages","getItem","parse","setItem","current","scrollTop","scrollHeight","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","size","ref","message","onSubmit","type","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n// ------ STATES ------ //\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      role: \"assistant\",\n      content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? 🐮\",\n    },\n  ]);\n  const [menu] = useState(menuData.menu);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Include an emoji in your message to convey personality. Write in a straightforward and concise manner (preferably under 50 characters), avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\"\n  const [order, setOrder] = useState([]);\n  const chatContainerRef = useRef(null);\n\n\n// ------ FUNCTIONS //\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (inputText.trim()) {\n      const newMessages = [...messages, { role: \"user\", content: inputText }];\n      setMessages(newMessages);\n  \n      const chatHistory = newMessages.map((m) => m.content).join(\" \");\n  \n      const response = await fetch(\"http://localhost:3001/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI server for Chick-fil-A, helping customers place orders using this ${persona}. The menu items available are: ${menu.map((item) => item.name).join(\", \")}. ${chatHistory} Do not recommend menu items if the customer hasn't completed their first menu item.`,\n          temperature: 0,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n  \n      const responseBody = await response.json();\n  \n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n  \n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n  \n      setInputText(\"\");\n    }\n  };\n\n\n  const overseer = useCallback(async () => {\n    const chatHistory = messages.map((m) => m.content).join(\" \");\n  \n    const response = await fetch(\"http://localhost:3001/api/overseer\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        prompt: `Analyze this conversation: ${chatHistory}. Given this conversation and these menu items available here: ${menu.map((item) => item.name).join(\", \")} In an imperitive and concise manner, return ONLY the NAMES of the menu items the user wants added to their order in a comma-separated list. Follow this structure all the time: Spicy Chicken Sandwich, Sweet Tea`,\n        temperature: 0,\n        topP: 1,\n        maxLength: 100,\n      }),\n    });\n  \n    const responseBody = await response.json();\n    return responseBody.content;\n  }, [messages, menu]);\n\n\n  const processOverseerResponse = useCallback(async () => {\n    const overseerResponse = await overseer();\n    const itemStrings = overseerResponse.split(\", \");\n  \n    const newOrder = itemStrings.map((itemString) => {\n      const [itemName, ...modifications] = itemString.split(\" with \");\n      const menuItem = menu.find((item) => item.name.toLowerCase() === itemName.toLowerCase());\n  \n      if (!menuItem) return null;\n  \n      const appliedModifications = modifications\n        .map((mod) => menuItem.modifications.find((m) => m.name.toLowerCase() === mod.toLowerCase()))\n        .filter((m) => m);\n  \n      return {\n        ...menuItem,\n        quantity: 1,\n        modifications: appliedModifications,\n      };\n    }).filter((item) => item);\n  \n    setOrder(newOrder);\n    console.log(\"Overseer:\", overseerResponse);\n  \n  }, [menu, overseer]);\n\n  const clearChat = () => {\n    localStorage.removeItem(\"chat_history\");\n    setMessages([\n      {\n        role: \"assistant\",\n        content: \"Welcome to Chick-fil-A! We're so excited to see you! What can we get started for you today? 🐮\",\n      },\n    ]);\n    setOrder([]);\n  };\n  \n\n// ------ HOOKS ------ //\nuseEffect(() => {\n  const storedMessages = localStorage.getItem(\"chat_history\");\n  if (storedMessages) {\n    setMessages(JSON.parse(storedMessages));\n  }\n}, []);\n\nuseEffect(() => {\n  localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n}, [messages]);\n\nuseEffect(() => {\n  localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  // Add these lines to scroll to the latest message when messages change\n  if (chatContainerRef.current) {\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n  }\n}, [messages]);\n\nuseEffect(() => {\n  if (messages.length > 1) {\n    processOverseerResponse();\n  }\n}, [messages, menu, overseer, processOverseerResponse]);\n\n  \n// ------ RETURN ------ //\n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"order-container\">\n  <h2>Your Order</h2>\n  {order.length > 0 ? (\n  <ul>\n    {order.map((item, index) => (\n      <li key={index}>\n        {item.name} - {item.size ? `${item.size} ` : \"\"}{item.quantity > 1 ? `(${item.quantity})` : \"\"}\n        {item.modifications && item.modifications.length > 0 && (\n          <span> (with {item.modifications.map((mod) => mod.name).join(\", \")})</span>\n        )}\n      </li>\n    ))}\n  </ul>\n) : (\n  <p>No items in your order.</p>\n)}\n\n</div>\n      <div className=\"chat-container\" ref={chatContainerRef}>\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n        <button onClick={clearChat}>Clear</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}