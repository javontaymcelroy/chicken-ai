{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport extractInfo from './extractInfo.js';\nimport menuData from './menuData.json';\nimport { MenuOrderProvider, MenuOrderContext } from \"./MenuOrderContext\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const {\n    dispatch\n  } = useContext(MenuOrderContext);\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: 'user',\n        content: inputText\n      }]);\n      const response = await fetch('/api/chatgpt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: inputText,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      console.log(\"Raw response:\", response);\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            dispatch({\n              type: \"ADD_ITEM\",\n              payload: extractedInfo.item\n            });\n            break;\n          case \"update\":\n            dispatch({\n              type: \"UPDATE_ITEM\",\n              payload: extractedInfo.item\n            });\n            break;\n          case \"delete\":\n            dispatch({\n              type: \"DELETE_ITEM\",\n              payload: {\n                id: extractedInfo.itemId\n              }\n            });\n            break;\n          default:\n            break;\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          role: 'assistant',\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-A ChatGPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"thTMZe0XYCqWu/2vqZC//yt2BA4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useContext","extractInfo","menuData","MenuOrderProvider","MenuOrderContext","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","dispatch","storedMessages","localStorage","getItem","JSON","parse","setItem","stringify","handleSubmit","e","preventDefault","trim","role","content","response","fetch","method","headers","body","prompt","temperature","topP","maxLength","console","log","responseBody","json","chatGPTResponse","extractedInfo","action","type","payload","item","id","itemId","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","onSubmit","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport extractInfo from './extractInfo.js';\nimport menuData from './menuData.json';\nimport { MenuOrderProvider, MenuOrderContext } from \"./MenuOrderContext\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const { dispatch } = useContext(MenuOrderContext);\n\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (inputText.trim()) {\n      setMessages([...messages, { role: 'user', content: inputText }]);\n  \n      const response = await fetch('/api/chatgpt', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: inputText,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n  \n      console.log(\"Raw response:\", response);\n  \n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n  \n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n  \n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n  \n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            dispatch({ type: \"ADD_ITEM\", payload: extractedInfo.item });\n            break;\n          case \"update\":\n            dispatch({ type: \"UPDATE_ITEM\", payload: extractedInfo.item });\n            break;\n          case \"delete\":\n            dispatch({ type: \"DELETE_ITEM\", payload: { id: extractedInfo.itemId } });\n            break;\n          default:\n            break;\n        }\n  \n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: 'assistant', content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n  \n      setInputText('');\n    }\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-A ChatGPT</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}