{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport menuData from './menuData.json';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu, setMenu] = useState(menuData);\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n  function extractInfo(chatGPTResponse) {\n    const addPattern = /(?:adding|coming right up)[^.]*\\b(?<itemName>[\\w\\s]+)\\b/i;\n    const updatePattern = /(?:updating|changing)[^.]*\\b(?<itemName>[\\w\\s]+)\\b/i;\n    const deletePattern = /(?:removing|deleting)[^.]*\\b(?<itemName>[\\w\\s]+)\\b/i;\n    const addMatch = chatGPTResponse.match(addPattern);\n    const updateMatch = chatGPTResponse.match(updatePattern);\n    const deleteMatch = chatGPTResponse.match(deletePattern);\n    if (addMatch && addMatch.groups) {\n      return {\n        action: \"add\",\n        item: {\n          name: addMatch.groups.itemName\n        }\n      };\n    } else if (updateMatch && updateMatch.groups) {\n      return {\n        action: \"update\",\n        item: {\n          name: updateMatch.groups.itemName\n        }\n      };\n    } else if (deleteMatch && deleteMatch.groups) {\n      return {\n        action: \"delete\",\n        item: {\n          name: deleteMatch.groups.itemName\n        }\n      };\n    }\n    return {};\n  }\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. ${inputText}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      console.log(\"Raw response:\", response);\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(item => item.id === extractedInfo.item.id);\n            if (itemToAdd) {\n              console.log(\"Menu before add:\", menu);\n              itemToAdd.quantity = (itemToAdd.quantity || 0) + 1;\n              setMenu([...menu]);\n              console.log(\"Menu after add:\", menu);\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = menu.find(item => item.id === extractedInfo.item.id);\n            if (itemToUpdate) {\n              console.log(\"Menu before update:\", menu);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setMenu([...menu]);\n              console.log(\"Menu after update:\", menu);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = menu.findIndex(item => item.id === extractedInfo.itemId);\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Menu before delete:\", menu);\n              setMenu(menu.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Menu after delete:\", menu);\n            }\n            break;\n          default:\n            break;\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-A ChatGPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7/GaGblcFUs1Nh4lihc1nITQJWc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","menu","setMenu","storedMessages","localStorage","getItem","JSON","parse","setItem","stringify","extractInfo","chatGPTResponse","addPattern","updatePattern","deletePattern","addMatch","match","updateMatch","deleteMatch","groups","action","item","name","itemName","handleSubmit","e","preventDefault","trim","role","content","response","fetch","method","headers","body","prompt","temperature","topP","maxLength","console","log","responseBody","json","extractedInfo","itemToAdd","find","id","quantity","itemToUpdate","itemToDeleteIndex","findIndex","itemId","filter","_","index","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport menuData from './menuData.json';\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu, setMenu] = useState(menuData);\n\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n\n\n  function extractInfo(chatGPTResponse) {\n    const addPattern = /(?:adding|coming right up)[^.]*\\b(?<itemName>[\\w\\s]+)\\b/i;\n    const updatePattern = /(?:updating|changing)[^.]*\\b(?<itemName>[\\w\\s]+)\\b/i;\n    const deletePattern = /(?:removing|deleting)[^.]*\\b(?<itemName>[\\w\\s]+)\\b/i;\n  \n    const addMatch = chatGPTResponse.match(addPattern);\n    const updateMatch = chatGPTResponse.match(updatePattern);\n    const deleteMatch = chatGPTResponse.match(deletePattern);\n  \n    if (addMatch && addMatch.groups) {\n      return { action: \"add\", item: { name: addMatch.groups.itemName } };\n    } else if (updateMatch && updateMatch.groups) {\n      return { action: \"update\", item: { name: updateMatch.groups.itemName } };\n    } else if (deleteMatch && deleteMatch.groups) {\n      return { action: \"delete\", item: { name: deleteMatch.groups.itemName } };\n    }\n  \n    return {};\n  }\n\n  \n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (inputText.trim()) {\n      setMessages([...messages, { role: \"user\", content: inputText }]);\n\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. ${inputText}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n\n      console.log(\"Raw response:\", response);\n\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find((item) => item.id === extractedInfo.item.id);\n            if (itemToAdd) {\n              console.log(\"Menu before add:\", menu);\n              itemToAdd.quantity = (itemToAdd.quantity || 0) + 1;\n              setMenu([...menu]);\n              console.log(\"Menu after add:\", menu);\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = menu.find((item) => item.id === extractedInfo.item.id);\n            if (itemToUpdate) {\n              console.log(\"Menu before update:\", menu);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setMenu([...menu]);\n              console.log(\"Menu after update:\", menu);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = menu.findIndex((item) => item.id === extractedInfo.itemId);\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Menu before delete:\", menu);\n              setMenu(menu.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Menu after delete:\", menu);\n            }\n            break;\n          default:\n            break;\n        }\n\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n\n      setInputText(\"\");\n    }\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-A ChatGPT</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}