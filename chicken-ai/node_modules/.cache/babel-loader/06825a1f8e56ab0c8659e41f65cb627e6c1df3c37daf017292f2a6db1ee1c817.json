{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  const greetCustomer = async () => {\n    const response = await fetch(\"/api/chatgpt\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map(item => item.name).join(\", \")}. Persona: ${persona}. Greet the customer.`,\n        temperature: 0.7,\n        topP: 1,\n        maxLength: 150\n      })\n    });\n    const responseBody = await response.json();\n    if (responseBody && responseBody.content) {\n      const chatGPTResponse = responseBody.content;\n      setMessages(prevMessages => [...prevMessages, {\n        role: \"assistant\",\n        content: chatGPTResponse\n      }]);\n    } else {\n      console.log(\"No response content:\", responseBody);\n    }\n  };\n  useEffect(() => {\n    greetCustomer();\n  }, []);\n  function extractInfo(chatGPTResponse) {\n    const patterns = [{\n      action: \"add\",\n      regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to my order)/i\n    }, {\n      action: \"update\",\n      regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i\n    }, {\n      action: \"delete\",\n      regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i\n    }, {\n      action: \"info\",\n      regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i\n    }];\n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return {\n          action: pattern.action,\n          item: {\n            name: itemName,\n            quantity: itemQuantity\n          }\n        };\n      }\n    }\n    return {};\n  }\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map(item => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      const responseBody = await response.json();\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              const existingOrderItem = order.find(item => item.id === itemToAdd.id);\n              if (existingOrderItem) {\n                existingOrderItem.quantity += 1;\n                setOrder([...order]);\n              } else {\n                setOrder([...order, {\n                  ...itemToAdd,\n                  quantity: 1\n                }]);\n              }\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n            }\n            break;\n          default:\n            break;\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"v7SJEvEEkKc4tFcmReNnEr4xatA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","menu","order","setOrder","persona","greetCustomer","response","fetch","method","headers","body","JSON","stringify","prompt","map","item","name","join","temperature","topP","maxLength","responseBody","json","content","chatGPTResponse","prevMessages","role","console","log","extractInfo","patterns","action","regex","pattern","match","groups","itemName","trim","toLowerCase","itemQuantity","quantity","parseInt","handleSubmit","e","preventDefault","chatHistory","m","extractedInfo","itemToAdd","find","existingOrderItem","id","itemToUpdate","itemToDeleteIndex","findIndex","filter","_","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n\n  const greetCustomer = async () => {\n    const response = await fetch(\"/api/chatgpt\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map((item) => item.name).join(\", \")}. Persona: ${persona}. Greet the customer.`,\n        temperature: 0.7,\n        topP: 1,\n        maxLength: 150,\n      }),\n    });\n  \n    const responseBody = await response.json();\n  \n    if (responseBody && responseBody.content) {\n      const chatGPTResponse = responseBody.content;\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: \"assistant\", content: chatGPTResponse },\n      ]);\n    } else {\n      console.log(\"No response content:\", responseBody);\n    }\n  };\n\n  useEffect(() => {\n    greetCustomer();\n  }, []);\n  \n  \n\n  function extractInfo(chatGPTResponse) {\n    const patterns = [\n      {\n        action: \"add\",\n        regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to my order)/i,\n      },\n      {\n        action: \"update\",\n        regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i,\n      },\n      {\n        action: \"delete\",\n        regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i,\n      },\n      {\n        action: \"info\",\n        regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i,\n      },\n    ];\n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return { action: pattern.action, item: { name: itemName, quantity: itemQuantity } };\n      }\n    }\n    return {};\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (inputText.trim()) {\n      setMessages([...messages, { role: \"user\", content: inputText }]);\n\n      const chatHistory = [...messages, { role: \"user\", content: inputText }].map((m) => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map((item) => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n\n      const responseBody = await response.json();\n\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              const existingOrderItem = order.find((item) => item.id === itemToAdd.id);\n              if (existingOrderItem) {\n                existingOrderItem.quantity += 1;\n                setOrder([...order]);\n              } else {\n                setOrder([...order, { ...itemToAdd, quantity: 1 }]);\n              }\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n            }\n            break;\n          default:\n            break;\n        }\n\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n\n      setInputText(\"\");\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}