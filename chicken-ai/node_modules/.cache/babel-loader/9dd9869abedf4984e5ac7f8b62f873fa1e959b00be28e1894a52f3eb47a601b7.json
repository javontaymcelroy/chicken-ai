{"ast":null,"code":"var _jsxFileName = \"/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [greetingSent, setGreetingSent] = useState(false);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\";\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n\n  // // Send the initial message to ChatGPT\n  // useEffect(() => {\n  //   const sendInitialMessage = async () => {\n  //     const response = await fetch(\"/api/chatgpt\", {\n  //       method: \"POST\",\n  //       headers: { \"Content-Type\": \"application/json\" },\n  //       body: JSON.stringify({\n  //         prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. Greet the customer with a short and sweet greeting. ${persona}`,\n  //         temperature: 0.7,\n  //         topP: 1,\n  //         maxLength: 120,\n  //       }),\n  //     });\n\n  //     const responseBody = await response.json();\n\n  //     if (responseBody && responseBody.content) {\n  //       setMessages((prevMessages) => [\n  //         ...prevMessages,\n  //         { role: \"assistant\", content: responseBody.content },\n  //       ]);\n  //       setGreetingSent(true);\n  //     }\n  //   };\n\n  //   if (!greetingSent) {\n  //     sendInitialMessage();\n  //   }\n  // }, [greetingSent]);\n\n  useEffect(() => {\n    console.log(\"Initial order:\", order);\n  }, [order]);\n  function extractInfo(chatGPTResponse) {\n    const patterns = [{\n      action: \"add\",\n      regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to my order)/i\n    }, {\n      action: \"update\",\n      regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i\n    }, {\n      action: \"delete\",\n      regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i\n    }, {\n      action: \"info\",\n      regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i\n    }];\n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return {\n          action: pattern.action,\n          item: {\n            name: itemName,\n            quantity: itemQuantity\n          }\n        };\n      }\n    }\n    return {};\n  }\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      setMessages([...messages, {\n        role: \"user\",\n        content: inputText\n      }]);\n      const chatHistory = [...messages, {\n        role: \"user\",\n        content: inputText\n      }].map(m => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map(item => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150\n        })\n      });\n      console.log(\"Raw response:\", response);\n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n\n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n\n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              console.log(\"Order before add:\", order);\n              const existingOrderItem = order.find(item => item.id === itemToAdd.id);\n              if (existingOrderItem) {\n                existingOrderItem.quantity += 1;\n              } else {\n                setOrder([...order, {\n                  ...itemToAdd,\n                  quantity: 1\n                }]);\n              }\n              console.log(\"Order after add:\", order);\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex(item => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n          default:\n            break;\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          role: \"assistant\",\n          content: chatGPTResponse\n        }]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n      setInputText(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chick-fil-AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`,\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qANKP2hZEntLS81aqsQyWo40NLA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","menuData","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","messages","setMessages","greetingSent","setGreetingSent","menu","order","setOrder","persona","storedMessages","localStorage","getItem","JSON","parse","setItem","stringify","console","log","extractInfo","chatGPTResponse","patterns","action","regex","pattern","match","groups","itemName","trim","toLowerCase","itemQuantity","quantity","parseInt","item","name","handleSubmit","e","preventDefault","role","content","chatHistory","map","m","join","response","fetch","method","headers","body","prompt","temperature","topP","maxLength","responseBody","json","extractedInfo","itemToAdd","find","existingOrderItem","id","itemToUpdate","itemToDeleteIndex","findIndex","filter","_","index","prevMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/javontaymcelroy/Documents/Coding/chicken-ai/chicken-ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport menuData from \"./menuData.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [greetingSent, setGreetingSent] = useState(false);\n  const [menu] = useState(menuData.menu);\n  const [order, setOrder] = useState([]);\n  const persona = \"Use a friendly and approachable tone, add a touch of wit and humor, and incorporate colloquialisms and everyday language to give your writing a down-to-earth quality. Write in a straightforward and concise manner, avoiding excessive use of flowery language or complex sentence structures. Keep your writing style relatable and easy to follow, to establish yourself as a friendly and likable person.\"\n\n  useEffect(() => {\n    const storedMessages = localStorage.getItem(\"chat_history\");\n    if (storedMessages) {\n      setMessages(JSON.parse(storedMessages));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"chat_history\", JSON.stringify(messages));\n  }, [messages]);\n\n\n// // Send the initial message to ChatGPT\n// useEffect(() => {\n//   const sendInitialMessage = async () => {\n//     const response = await fetch(\"/api/chatgpt\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify({\n//         prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. Greet the customer with a short and sweet greeting. ${persona}`,\n//         temperature: 0.7,\n//         topP: 1,\n//         maxLength: 120,\n//       }),\n//     });\n\n//     const responseBody = await response.json();\n\n//     if (responseBody && responseBody.content) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { role: \"assistant\", content: responseBody.content },\n//       ]);\n//       setGreetingSent(true);\n//     }\n//   };\n\n//   if (!greetingSent) {\n//     sendInitialMessage();\n//   }\n// }, [greetingSent]);\n\n\n\n  useEffect(() => {\n    console.log(\"Initial order:\", order);\n  }, [order]);\n\n  function extractInfo(chatGPTResponse) {\n    const patterns = [\n      {\n        action: \"add\",\n        regex: /\\b(?:add(?:ing)?|get(?:ting)?|i(?:'?d)? like|want|one|a)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|to my order)/i,\n      },\n      {\n        action: \"update\",\n        regex: /\\b(?:change|update|switch|substitute|modify)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|in my order)\\b[^.]*\\b(?<quantity>\\d+)\\b/i,\n      },\n      {\n        action: \"delete\",\n        regex: /\\b(?:remove|delete|cancel|take off|no)\\b[^.]*\\b(?<itemName>[\\w\\s]+)\\b(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree|from my order)/i,\n      },\n      {\n        action: \"info\",\n        regex: /\\b(?:what(?:'s| is)?\\s*)(?:the|is there a)\\s+(?<itemName>[\\w\\s]+)(?:meal|sandwich|wrap|salad|soup|dessert|drink|sides?|entree)?\\s*\\??/i,\n      },\n    ];\n  \n    for (const pattern of patterns) {\n      const match = chatGPTResponse.match(pattern.regex);\n      if (match && match.groups) {\n        const itemName = match.groups.itemName.trim().toLowerCase();\n        const itemQuantity = match.groups.quantity ? parseInt(match.groups.quantity) : null;\n        return { action: pattern.action, item: { name: itemName, quantity: itemQuantity } };\n      }\n    }\n  \n    return {};\n  }\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (inputText.trim()) {\n      setMessages([...messages, { role: \"user\", content: inputText }]);\n  \n      const chatHistory = [...messages, { role: \"user\", content: inputText }].map((m) => m.content).join(\" \");\n      const response = await fetch(\"/api/chatgpt\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt: `You are an AI assistant for Chick-fil-A, helping customers place orders. The menu items available are: ${menu.map((item) => item.name).join(\", \")}. ${chatHistory}`,\n          temperature: 0.7,\n          topP: 1,\n          maxLength: 150,\n        }),\n      });\n  \n      console.log(\"Raw response:\", response);\n  \n      const responseBody = await response.json();\n      console.log(\"Response body:\", responseBody);\n  \n      if (responseBody && responseBody.content) {\n        const chatGPTResponse = responseBody.content;\n  \n        // Extract relevant information from the ChatGPT response\n        const extractedInfo = extractInfo(chatGPTResponse);\n  \n        // Perform CRUD operation based on the extracted information\n        switch (extractedInfo.action) {\n          case \"add\":\n            const itemToAdd = menu.find((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToAdd) {\n              console.log(\"Order before add:\", order);\n              const existingOrderItem = order.find((item) => item.id === itemToAdd.id);\n              if (existingOrderItem) {\n                existingOrderItem.quantity += 1;\n              } else {\n                setOrder([...order, { ...itemToAdd, quantity: 1 }]);\n              }\n              console.log(\"Order after add:\", order);\n            }\n            break;\n          case \"update\":\n            const itemToUpdate = order.find((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToUpdate) {\n              console.log(\"Order before update:\", order);\n              itemToUpdate.quantity = extractedInfo.item.quantity;\n              setOrder([...order]);\n              console.log(\"Order after update:\", order);\n            }\n            break;\n          case \"delete\":\n            const itemToDeleteIndex = order.findIndex((item) => item.name.toLowerCase() === extractedInfo.item.name.toLowerCase());\n            if (itemToDeleteIndex > -1) {\n              console.log(\"Order before delete:\", order);\n              setOrder(order.filter((_, index) => index !== itemToDeleteIndex));\n              console.log(\"Order after delete:\", order);\n            }\n            break;\n          default:\n            break;\n        }\n  \n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { role: \"assistant\", content: chatGPTResponse },\n        ]);\n      } else {\n        console.log(\"No response content:\", responseBody);\n      }\n  \n      setInputText(\"\");\n    }\n  };\n  \n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Chick-fil-AI</h1>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`chat-message ${message.role === \"user\" ? \"user\" : \"assistant\"}`}\n          >\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}